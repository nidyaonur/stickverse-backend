// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: maplist.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MaplistServiceClient is the client API for MaplistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaplistServiceClient interface {
	GetTable(ctx context.Context, in *TableRequest, opts ...grpc.CallOption) (*TableResponse, error)
	GetLibrary(ctx context.Context, in *LibraryRequest, opts ...grpc.CallOption) (*LibraryResponse, error)
}

type maplistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaplistServiceClient(cc grpc.ClientConnInterface) MaplistServiceClient {
	return &maplistServiceClient{cc}
}

func (c *maplistServiceClient) GetTable(ctx context.Context, in *TableRequest, opts ...grpc.CallOption) (*TableResponse, error) {
	out := new(TableResponse)
	err := c.cc.Invoke(ctx, "/pb.MaplistService/GetTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maplistServiceClient) GetLibrary(ctx context.Context, in *LibraryRequest, opts ...grpc.CallOption) (*LibraryResponse, error) {
	out := new(LibraryResponse)
	err := c.cc.Invoke(ctx, "/pb.MaplistService/GetLibrary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaplistServiceServer is the server API for MaplistService service.
// All implementations must embed UnimplementedMaplistServiceServer
// for forward compatibility
type MaplistServiceServer interface {
	GetTable(context.Context, *TableRequest) (*TableResponse, error)
	GetLibrary(context.Context, *LibraryRequest) (*LibraryResponse, error)
	mustEmbedUnimplementedMaplistServiceServer()
}

// UnimplementedMaplistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMaplistServiceServer struct {
}

func (UnimplementedMaplistServiceServer) GetTable(context.Context, *TableRequest) (*TableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTable not implemented")
}
func (UnimplementedMaplistServiceServer) GetLibrary(context.Context, *LibraryRequest) (*LibraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLibrary not implemented")
}
func (UnimplementedMaplistServiceServer) mustEmbedUnimplementedMaplistServiceServer() {}

// UnsafeMaplistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaplistServiceServer will
// result in compilation errors.
type UnsafeMaplistServiceServer interface {
	mustEmbedUnimplementedMaplistServiceServer()
}

func RegisterMaplistServiceServer(s grpc.ServiceRegistrar, srv MaplistServiceServer) {
	s.RegisterService(&MaplistService_ServiceDesc, srv)
}

func _MaplistService_GetTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaplistServiceServer).GetTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MaplistService/GetTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaplistServiceServer).GetTable(ctx, req.(*TableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaplistService_GetLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaplistServiceServer).GetLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MaplistService/GetLibrary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaplistServiceServer).GetLibrary(ctx, req.(*LibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaplistService_ServiceDesc is the grpc.ServiceDesc for MaplistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaplistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MaplistService",
	HandlerType: (*MaplistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTable",
			Handler:    _MaplistService_GetTable_Handler,
		},
		{
			MethodName: "GetLibrary",
			Handler:    _MaplistService_GetLibrary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maplist.proto",
}
