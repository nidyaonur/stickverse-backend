// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: structure.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StructureServiceClient is the client API for StructureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StructureServiceClient interface {
	StructureOperation(ctx context.Context, in *StructureRequest, opts ...grpc.CallOption) (*StructureResponse, error)
}

type structureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStructureServiceClient(cc grpc.ClientConnInterface) StructureServiceClient {
	return &structureServiceClient{cc}
}

func (c *structureServiceClient) StructureOperation(ctx context.Context, in *StructureRequest, opts ...grpc.CallOption) (*StructureResponse, error) {
	out := new(StructureResponse)
	err := c.cc.Invoke(ctx, "/pb.StructureService/StructureOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StructureServiceServer is the server API for StructureService service.
// All implementations must embed UnimplementedStructureServiceServer
// for forward compatibility
type StructureServiceServer interface {
	StructureOperation(context.Context, *StructureRequest) (*StructureResponse, error)
	mustEmbedUnimplementedStructureServiceServer()
}

// UnimplementedStructureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStructureServiceServer struct {
}

func (UnimplementedStructureServiceServer) StructureOperation(context.Context, *StructureRequest) (*StructureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructureOperation not implemented")
}
func (UnimplementedStructureServiceServer) mustEmbedUnimplementedStructureServiceServer() {}

// UnsafeStructureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StructureServiceServer will
// result in compilation errors.
type UnsafeStructureServiceServer interface {
	mustEmbedUnimplementedStructureServiceServer()
}

func RegisterStructureServiceServer(s grpc.ServiceRegistrar, srv StructureServiceServer) {
	s.RegisterService(&StructureService_ServiceDesc, srv)
}

func _StructureService_StructureOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StructureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StructureServiceServer).StructureOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.StructureService/StructureOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StructureServiceServer).StructureOperation(ctx, req.(*StructureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StructureService_ServiceDesc is the grpc.ServiceDesc for StructureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StructureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StructureService",
	HandlerType: (*StructureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StructureOperation",
			Handler:    _StructureService_StructureOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "structure.proto",
}
